@startuml

class Application {
+start(Stage stage)
+main(String[] args)
}

class ApplicationController {
-String ALL
-String INCOMPLETE
-String COMPLETE
-ToDoList toDoList
-TableView<ToDoItem> toDoListTable
-Button editList
-Button saveList
-Button loadList
-TableColumn<ToDoItem, String> itemDescription
-TableColumn<ToDoItem, String> itemDueDate
-TableColumn<ToDoItem, Button> removeItem
-TableColumn<ToDoItem, CheckBox> completeItem
-TextField newItemDescription
-DatePicker newItemDueDate
-ChoiceBox<String> showStatusBox

+initialize(URL, ResourceBundle)
-addItemClicked()
-editListClicked()
-clearListClicked()
-saveListClicked()
-loadListClicked()
-statusSelected()
-dateStringNullOrEmpty(String)
-description1to256Characters(CellEditEvent<ToDoItem, String>)
-dateInFormatOrBlank(CellEditEvent<ToDoItem, String>)
-showingIncompleteAndMarkedAsComplete(ChoiceBox<String>, boolean)
-showingCompleteAndMarkedAsIncomplete(ChoiceBox<String>, boolean)
}

class ToDoList {
-List<ToDoItem> itemList

+add(ToDoItem)
+remove(ToDoItem)
+clear()
+getItemList()
+showIncomplete()
+showComplete()
+saveList(File)
+loadList(File)
+equivalentTo(ToDoList)
}

class ToDoItem {
-String description
-String dueDate
-boolean complete

+ToDoItem(String, String, boolean)
+ToDoItem(String, String)
+ToDoItem(String)
+getDescription()
+setDescription(String)
+getDueDate()
+setDueDate(String)
+isComplete()
+toggleComplete()
+equivalentTo(ToDoItem)
}

class ActionButtonTableCell {
-Button actionButton

+ActionButtonTableCell(String, Function<S, S>)
+forTableColumn(String, Function<S, S>)
+getCurrentItem()
+updateItem(Button, boolean)
}

Application <|-- ApplicationController
ApplicationController <|-- ToDoList
ApplicationController <|-- ActionButtonTableCell

ToDoList *-- ToDoItem




@enduml